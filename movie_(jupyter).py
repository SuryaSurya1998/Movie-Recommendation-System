# -*- coding: utf-8 -*-
"""movie (jupyter).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EcMS4YY3AiIkGTTdkerKuibeHEYKb52o
"""

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

movies=pd.read_csv('Downloads/movies1.csv')
#movie_link=pd.read_excel('movie_links.xlsx')
movi=pd.read_excel('Downloads/movi.xlsx')
ratings = pd.read_csv('Downloads/ratings1.csv')
tags=pd.read_csv('Downloads/tags1.csv')
links=pd.read_csv('Downloads/links.csv')

"""## Movie dataset"""

movies.describe()

movies.info()

movies.shape

movies.dtypes

movies.columns

movies.isnull().sum()

#links dataset
links.describe()

links.info()

links.columns

links.isnull().sum()

#tags dataset

tags.describe()

tags.info()

tags.columns

tags.isnull().sum()

#rating dataset

ratings.describe()

ratings.info()

ratings.columns

ratings.isnull().sum()

"""## Merging movie dataset & ratings dataset"""

movie_dataset=pd.merge(movies,ratings,on = 'movieId')
df=movie_dataset
df.head()

g12=df.groupby(['movieId','movie_name','year','genres'],as_index=False)['rating'].mean()
g12.head()

m1 = g12['genres'].str.get_dummies('|')
m1.head()

"""## m2 is the merged dataset of movies and ratings"""

m2 = g12.join(g12.pop('genres').str.get_dummies('|'))
m2.head()

m2.to_csv("mov_rat.csv")

"""## Count of movies released in between the year 1902-2018"""

g1=movies.groupby(['year'],as_index=False)['movie_name'].count()
g1

#Barchart
plt.figure(figsize=(20,6))
plt.xticks(rotation=90)
sns.barplot(x='year',y='movie_name',data=g1,ci=None)

"""### The above graph shows the movie released in between 1902 to 2018"""

#pie chart
plt.figure(figsize=(25,20))
plt.pie(g1['movie_name'],labels=g1['year'],autopct='%0.1f%%')

"""# count of all genres"""

genres=movies['genres'].str.get_dummies('|').sum()
genres.sort_values()

"""### In Drama , Comedy high number of movies are released"""

#bar chart for the count for genres

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=movi,ci=None)



"""# Finding the avarege ratings for each and every genres"""

Action=m2.groupby(['Action'],as_index=False)['rating'].mean()
print(Action)
Adventure=m2.groupby(['Adventure'],as_index=False)['rating'].mean()
print(Adventure)
Animation=m2.groupby(['Animation'],as_index=False)['rating'].mean()
print(Animation)
Biography=m2.groupby(['Biography'],as_index=False)['rating'].mean()
print(Biography)
Children=m2.groupby(['Children'],as_index=False)['rating'].mean()
print(Children)
Comedy=m2.groupby(['Comedy'],as_index=False)['rating'].mean()
print(Comedy)
Crime=m2.groupby(['Crime'],as_index=False)['rating'].mean()
print(Crime)
Documentary=m2.groupby(['Documentary'],as_index=False)['rating'].mean()
print(Documentary)
Drama=m2.groupby(['Drama'],as_index=False)['rating'].mean()
print(Drama)
Epic=m2.groupby(['Epic'],as_index=False)['rating'].mean()
print(Epic)
Fantasy=m2.groupby(['Fantasy'],as_index=False)['rating'].mean()
print(Fantasy)
Film_Noir=m2.groupby(['Film-Noir'],as_index=False)['rating'].mean()
print(Film_Noir)
Horror=m2.groupby(['Horror'],as_index=False)['rating'].mean()
print(Horror)
IMAX=m2.groupby(['IMAX'],as_index=False)['rating'].mean()
print(IMAX)
Musical=m2.groupby(['Musical'],as_index=False)['rating'].mean()
print(Musical)
Mystery=m2.groupby(['Mystery'],as_index=False)['rating'].mean()
print(Mystery)
Romance=m2.groupby(['Romance'],as_index=False)['rating'].mean()
print(Romance)
Satire=m2.groupby(['Satire'],as_index=False)['rating'].mean()
print(Satire)
Sci_Fi=m2.groupby(['Sci-Fi'],as_index=False)['rating'].mean()
print(Sci_Fi)
Sports=m2.groupby(['Sports'],as_index=False)['rating'].mean()
print(Sports)
Thriller=m2.groupby(['Thriller'],as_index=False)['rating'].mean()
print(Thriller)
War=m2.groupby(['War'],as_index=False)['rating'].mean()
print(War)
Western=m2.groupby(['Western'],as_index=False)['rating'].mean()
print(Western)

"""## Finally we got the average rating for every genres
## then i mannualy noted and created it in .xlsx dataset
"""

genres_ratings=pd.read_excel('Downloads/ratings_genres.xlsx')
genres_ratings

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='rating',data=genres_ratings,ci=None)

"""# calculating the number of movies released based on genres"""

years_count = m2.groupby(['year'],as_index=False)['Action', 'Adventure','Animation', 'Biography', 'Children', 'Comedy', 'Crime', 'Documentary','Drama', 'Epic', 'Fantasy', 'Film-Noir', 'Horror', 'IMAX', 'Musical','Mystery', 'Romance', 'Satire', 'Sci-Fi', 'Sports', 'Thriller', 'War','Western'].sum().T
years_count

"""# importing genres years count """

count1 = pd.read_excel('Downloads/genres_count_years.xlsx')

#ploting graph for 2018
plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='year_2002',data=count1,ci=None)
plt.title('2002')

#pie chart for 2018
plt.figure(figsize=(10,10))
plt.pie(count1['year_2002'],labels=count1['genres'],autopct='%0.1f%%')

"""## Comparing the top 9  years movie released counts"""

ax = count1.plot(x="genres", y="year_2002", kind="bar")
count1.plot(x="genres", y="year_2006", kind="bar", ax=ax, color="C2")
count1.plot(x="genres", y="year_2001", kind="bar", ax=ax, color="C3")
count1.plot(x="genres", y="year_2007", kind="bar", ax=ax, color="C4")
count1.plot(x="genres", y="year_2000", kind="bar", ax=ax, color="C5")
count1.plot(x="genres", y="year_2009", kind="bar", ax=ax, color="C6")
count1.plot(x="genres", y="year_2003", kind="bar", ax=ax, color="C7")
count1.plot(x="genres", y="year_2004", kind="bar", ax=ax, color="C8")
count1.plot(x="genres", y="year_2014", kind="bar", ax=ax, color="C9")

plt.show()

"""#  find the rating wise"""

# ratings with < 1
h1 = g12[g12.rating <= 1]

h11 = h1['genres'].str.get_dummies('|').sum().reset_index()

h11=pd.read_excel('Downloads/h11.xlsx')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=h11,ci=None)
plt.title('rating <= 1')

plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
plt.pie(h11['count'],labels=h11['genres'],autopct='%0.1f%%')
plt.title('rating <= 1')

# rating 1 to 2
h2 = g12[g12.rating <= 2]

h2 = h2[h2.rating > 1]

h22 = h2['genres'].str.get_dummies('|').sum().reset_index()

h22=pd.read_excel('Downloads/h22.xlsx')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=h22,ci=None)
plt.title('rating 1 to 2')

plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
plt.pie(h22['count'],labels=h22['genres'],autopct='%0.1f%%')
plt.title('rating 1 to 2')

# ratings with 2 to 3
h3 = g12[g12.rating <= 3]

h33 = h3[h3.rating > 2]

h33 = h33['genres'].str.get_dummies('|').sum().reset_index()

h33=pd.read_excel('Downloads/h33.xlsx')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=h33,ci=None)
plt.title('rating 2 to 3')

plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
plt.pie(h33['count'],labels=h33['genres'],autopct='%0.1f%%')
plt.title('rating 2 to 3')

# ratings with 3 to 4
h4 = g12[g12.rating <= 4]

h44 = h4[h4.rating > 3]

h44 = h44['genres'].str.get_dummies('|').sum().reset_index()

h44=pd.read_excel('Downloads/h44.xlsx')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=h44,ci=None)
plt.title('rating 3 to 4')

plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
plt.pie(h44['count'],labels=h44['genres'],autopct='%0.1f%%')
plt.title('rating 3 to 4')

# rating with 4 to 5
h5 = g12[g12.rating <= 5]

h55 = h5[h5.rating > 4]

h55 = h55['genres'].str.get_dummies('|').sum().reset_index()

h55=pd.read_excel('Downloads/h55.xlsx')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=h55,ci=None)
plt.title('rating 4 to 5')

plt.figure(figsize=(20,10))
plt.xticks(rotation=90)
plt.pie(h55['count'],labels=h55['genres'],autopct='%0.1f%%')
plt.title('rating 4 to 5')

#ploting the scatter graph to overall movies with ratings
plt.scatter(x=m2['year'], y=m2['rating'])
plt.show()

"""# movie rated counting"""

movieId_count = df.groupby(['movieId']).count()

movieId_count = movieId_count.drop(['rating','date','time','year','genres','userId'],axis=1)

movieId_count

# counting the unique userId with count
userId_count = ratings.groupby(['userId']).count()

userId_count = userId_count.drop(['rating','date','time'],axis=1)
userId_count

# getting the userId 1 ratted details
u1=df.loc[df['userId']==1]

# in userId 1 ratings with above 3
u1 = u1.loc[u1['rating'] >= 3]

u1 = u1['genres'].str.get_dummies('|').sum().reset_index()

userId_1=pd.read_excel('Downloads/userId_1.xlsx')
userId_1

plt.figure(figsize=(10,10))
plt.pie(userId_1['count'],labels=userId_1['genres'],autopct='%0.1f%%')

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=userId_1,ci=None)
plt.title('userId_1_behaviour')

"""#### The above graph shows Drama ,Comedy ,Thriller ,Romance genres movies are the highly liked by the public

## Giving Rank to all individual movies
"""

#importing the movie_rated_count dataset
movie_rated_count = pd.read_excel('Downloads/movie_rated_count.xlsx')
movie_rated_count

#taking log for movie_rated_count
movie_rated_count['log_value'] = np.log(movie_rated_count['movie_rated_count']+1)
movie_rated_count

# Creating the rate to find the rank
movie_rated_count['Rate'] = movie_rated_count.rating * movie_rated_count.log_value
movie_rated_count

# Giving rank to movies
movie_rated_count['Rank'] = movie_rated_count['Rate'].rank(ascending=0)
movie_rated_count

"""### Giving Rank to Genres"""

#importing the Genres_count_rating
genres_counts_rating = pd.read_csv('Downloads/genres_counts_rating.csv')
genres_counts_rating

#taking log for movie_rated_count
genres_counts_rating['log_value'] = np.log(genres_counts_rating['count']+1)
genres_counts_rating

# Creating the rate to find the rank
genres_counts_rating['Rate'] = genres_counts_rating.rating * genres_counts_rating.log_value
genres_counts_rating

# Giving rank to genres 
genres_counts_rating['Rank'] = genres_counts_rating['Rate'].rank(ascending=0)
genres_counts_rating

# getting top 5000 ranking movies 
rank_5000=movie_rated_count.loc[movie_rated_count['Rank'] <= 5000]

rank_5000 = rank_5000['genres'].str.get_dummies('|').sum().reset_index()

rank_5000=pd.read_excel('Downloads/rank_5000.xlsx')

# barplot for top 100 ranking movies
plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='count',data=rank_5000,ci=None)
plt.title('top 5000 ranking movies')

# pieplot for top 100 ranking movies
plt.figure(figsize=(10,10))
plt.pie(rank_5000['count'],labels=rank_5000['genres'],autopct='%0.1f%%')

#Finding the trand
k2017 = movie_rated_count.loc[movie_rated_count['year']==2017]
k2017.head(10)

k2017.sort_values("Rank", axis = 0, ascending = True,
                 inplace = True, na_position ='last')
k2017.head(10)

k1 = k2017['genres'].str.get_dummies('|').sum().reset_index()
k1

#overall liked movies in genres count
uf = g12.loc[g12['rating'] >= 3]

uf = uf['genres'].str.get_dummies('|').sum().reset_index()

liked_count = pd.read_excel('Downloads/liked_count.xlsx')

liked_count['%'] = (liked_count['count'] / liked_count['count'].sum())*100
print(liked_count)

plt.figure(figsize=(6,6))
plt.xticks(rotation=90)
sns.barplot(x='genres',y='%',data=liked_count,ci=None)

"""### Finally we recommend that Drama movies are most intrested by people and we recommend any director to take an drama genres film to make success

### And we recommend the director that Drama ,Comedy ,Thriller ,Romance ,Action movie genres covers around 60% of the people from the country

### we recomend the public that if they like to watch comedy type movie and missedout some of them in that type i recomend to watch those movies also.
"""